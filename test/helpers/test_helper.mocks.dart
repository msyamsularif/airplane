// Mocks generated by Mockito 5.1.0 from annotations
// in airplane/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:typed_data' as _i15;

import 'package:airplane/core/values/values.dart' as _i6;
import 'package:airplane/data/datasource/auth_data_source.dart' as _i9;
import 'package:airplane/data/datasource/destination_data_source.dart' as _i10;
import 'package:airplane/data/datasource/transaction_data_source.dart' as _i12;
import 'package:airplane/data/datasource/user_data_source.dart' as _i7;
import 'package:airplane/data/models/destination_model.dart' as _i11;
import 'package:airplane/data/models/transaction_model.dart' as _i13;
import 'package:airplane/data/models/user_model.dart' as _i2;
import 'package:airplane/domain/repositories/auth_repositories.dart' as _i17;
import 'package:airplane/domain/repositories/destination_repositories.dart'
    as _i19;
import 'package:airplane/domain/repositories/transaction_repositories.dart'
    as _i20;
import 'package:airplane/domain/repositories/user_repositories.dart' as _i18;
import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i14;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i16;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserModel_0 extends _i1.Fake implements _i2.UserModel {}

class _FakeFirebaseApp_1 extends _i1.Fake implements _i3.FirebaseApp {}

class _FakeSettings_2 extends _i1.Fake implements _i4.Settings {}

class _FakeCollectionReference_3<T extends Object?> extends _i1.Fake
    implements _i4.CollectionReference<T> {}

class _FakeWriteBatch_4 extends _i1.Fake implements _i4.WriteBatch {}

class _FakeLoadBundleTask_5 extends _i1.Fake implements _i4.LoadBundleTask {}

class _FakeQuerySnapshot_6<T extends Object?> extends _i1.Fake
    implements _i4.QuerySnapshot<T> {}

class _FakeQuery_7<T extends Object?> extends _i1.Fake implements _i4.Query<T> {
}

class _FakeDocumentReference_8<T extends Object?> extends _i1.Fake
    implements _i4.DocumentReference<T> {}

class _FakeFirebaseFirestore_9 extends _i1.Fake
    implements _i4.FirebaseFirestore {}

class _FakeDocumentSnapshot_10<T extends Object?> extends _i1.Fake
    implements _i4.DocumentSnapshot<T> {}

class _FakeSnapshotMetadata_11 extends _i1.Fake
    implements _i4.SnapshotMetadata {}

class _FakeActionCodeInfo_12 extends _i1.Fake implements _i5.ActionCodeInfo {}

class _FakeUserCredential_13 extends _i1.Fake implements _i5.UserCredential {}

class _FakeConfirmationResult_14 extends _i1.Fake
    implements _i5.ConfirmationResult {}

class _FakeUserMetadata_15 extends _i1.Fake implements _i5.UserMetadata {}

class _FakeIdTokenResult_16 extends _i1.Fake implements _i5.IdTokenResult {}

class _FakeUser_17 extends _i1.Fake implements _i5.User {}

class _FakeApiReturnValue_18<T> extends _i1.Fake
    implements _i6.ApiReturnValue<T> {}

/// A class which mocks [UserDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDataSource extends _i1.Mock implements _i7.UserDataSource {
  MockUserDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> setUser({_i2.UserModel? user}) =>
      (super.noSuchMethod(Invocation.method(#setUser, [], {#user: user}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updateUser({_i2.UserModel? user}) =>
      (super.noSuchMethod(Invocation.method(#updateUser, [], {#user: user}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i2.UserModel> getUserById({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getUserById, [], {#id: id}),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i8.Future<_i2.UserModel>);
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i9.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.UserModel> signIn({String? email, String? password}) => (super
      .noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0())) as _i8
      .Future<_i2.UserModel>);
  @override
  _i8.Future<_i2.UserModel> signUp(
          {String? email,
          String? password,
          String? name,
          String? hobby = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#signUp, [], {
                #email: email,
                #password: password,
                #name: name,
                #hobby: hobby
              }),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i8.Future<_i2.UserModel>);
  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [DestinationDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDestinationDataSource extends _i1.Mock
    implements _i10.DestinationDataSource {
  MockDestinationDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i11.DestinationModel>> fetchDestinations() =>
      (super.noSuchMethod(Invocation.method(#fetchDestinations, []),
              returnValue: Future<List<_i11.DestinationModel>>.value(
                  <_i11.DestinationModel>[]))
          as _i8.Future<List<_i11.DestinationModel>>);
}

/// A class which mocks [TransactionDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDataSource extends _i1.Mock
    implements _i12.TransactionDataSource {
  MockTransactionDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> createTransaction({_i13.TransactionModel? transaction}) =>
      (super.noSuchMethod(
          Invocation.method(
              #createTransaction, [], {#transaction: transaction}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<_i13.TransactionModel>> fetchTransactions({String? userId}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchTransactions, [], {#userId: userId}),
              returnValue: Future<List<_i13.TransactionModel>>.value(
                  <_i13.TransactionModel>[]))
          as _i8.Future<List<_i13.TransactionModel>>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_1()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i4.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i4.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
      returnValue: _FakeSettings_2()) as _i4.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_3<Map<String, dynamic>>())
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i4.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeWriteBatch_4()) as _i4.WriteBatch);
  @override
  _i8.Future<void> clearPersistence() =>
      (super.noSuchMethod(Invocation.method(#clearPersistence, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> enablePersistence(
          [_i14.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#enablePersistence, [persistenceSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i4.LoadBundleTask loadBundle(_i15.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
          returnValue: _FakeLoadBundleTask_5()) as _i4.LoadBundleTask);
  @override
  void useFirestoreEmulator(String? host, int? port,
          {bool? sslEnabled = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #useFirestoreEmulator, [host, port], {#sslEnabled: sslEnabled}),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i4.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i4.GetOptions? options = const _i4.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot_6<Map<String, dynamic>>())) as _i8
          .Future<_i4.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i4.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery_7<Map<String, dynamic>>())
          as _i4.Query<Map<String, dynamic>>);
  @override
  _i8.Future<void> disableNetwork() =>
      (super.noSuchMethod(Invocation.method(#disableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference_8<Map<String, dynamic>>())
          as _i4.DocumentReference<Map<String, dynamic>>);
  @override
  _i8.Future<void> enableNetwork() =>
      (super.noSuchMethod(Invocation.method(#enableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: Stream<void>.empty()) as _i8.Stream<void>);
  @override
  _i8.Future<T> runTransaction<T>(_i4.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #runTransaction, [transactionHandler], {#timeout: timeout}),
          returnValue: Future<T>.value(null)) as _i8.Future<T>);
  @override
  _i8.Future<void> terminate() =>
      (super.noSuchMethod(Invocation.method(#terminate, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(Invocation.method(#waitForPendingWrites, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i4.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_9()) as _i4.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i8.Future<_i4.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: Future<_i4.DocumentReference<T>>.value(
                  _FakeDocumentReference_8<T>()))
          as _i8.Future<_i4.DocumentReference<T>>);
  @override
  _i4.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
      Invocation.method(#doc, [path]),
      returnValue: _FakeDocumentReference_8<T>()) as _i4.DocumentReference<T>);
  @override
  _i4.CollectionReference<R> withConverter<R extends Object?>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference_3<R>())
          as _i4.CollectionReference<R>);
  @override
  _i4.Query<T> endAtDocument(_i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> endBeforeDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#endBeforeDocument, [documentSnapshot]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> endBefore(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endBefore, [values]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i8.Future<_i4.QuerySnapshot<T>> get([_i4.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue:
                  Future<_i4.QuerySnapshot<T>>.value(_FakeQuerySnapshot_6<T>()))
          as _i8.Future<_i4.QuerySnapshot<T>>);
  @override
  _i4.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> limitToLast(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limitToLast, [limit]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i8.Stream<_i4.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i4.QuerySnapshot<T>>.empty())
          as _i8.Stream<_i4.QuerySnapshot<T>>);
  @override
  _i4.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
          Invocation.method(#orderBy, [field], {#descending: descending}),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> startAfterDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAfterDocument, [documentSnapshot]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> startAfter(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAfter, [values]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> startAtDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
  @override
  _i4.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_7<T>()) as _i4.Query<T>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_9()) as _i4.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.CollectionReference<T> get parent =>
      (super.noSuchMethod(Invocation.getter(#parent),
              returnValue: _FakeCollectionReference_3<T>())
          as _i4.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_3<Map<String, dynamic>>())
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i8.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i4.DocumentSnapshot<T>> get([_i4.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i4.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_10<T>()))
          as _i8.Future<_i4.DocumentSnapshot<T>>);
  @override
  _i8.Stream<_i4.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i4.DocumentSnapshot<T>>.empty())
          as _i8.Stream<_i4.DocumentSnapshot<T>>);
  @override
  _i8.Future<void> set(T? data, [_i4.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i4.DocumentReference<R> withConverter<R>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_8<R>())
          as _i4.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i4.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.DocumentReference<T> get reference => (super.noSuchMethod(
      Invocation.getter(#reference),
      returnValue: _FakeDocumentReference_8<T>()) as _i4.DocumentReference<T>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_11()) as _i4.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i5.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_1()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set tenantId(String? tenantId) =>
      super.noSuchMethod(Invocation.setter(#tenantId, tenantId),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i8.Future<void> useAuthEmulator(String? host, int? port) =>
      (super.noSuchMethod(Invocation.method(#useAuthEmulator, [host, port]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#applyActionCode, [code]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i5.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#checkActionCode, [code]),
              returnValue:
                  Future<_i5.ActionCodeInfo>.value(_FakeActionCodeInfo_12()))
          as _i8.Future<_i5.ActionCodeInfo>);
  @override
  _i8.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#confirmPasswordReset, [],
              {#code: code, #newPassword: newPassword}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i5.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: Future<List<String>>.value(<String>[]))
      as _i8.Future<List<String>>);
  @override
  _i8.Future<_i5.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(Invocation.method(#getRedirectResult, []),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
      Invocation.method(#isSignInWithEmailLink, [emailLink]),
      returnValue: false) as bool);
  @override
  _i8.Stream<_i5.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: Stream<_i5.User?>.empty()) as _i8.Stream<_i5.User?>);
  @override
  _i8.Stream<_i5.User?> idTokenChanges() =>
      (super.noSuchMethod(Invocation.method(#idTokenChanges, []),
          returnValue: Stream<_i5.User?>.empty()) as _i8.Stream<_i5.User?>);
  @override
  _i8.Stream<_i5.User?> userChanges() =>
      (super.noSuchMethod(Invocation.method(#userChanges, []),
          returnValue: Stream<_i5.User?>.empty()) as _i8.Stream<_i5.User?>);
  @override
  _i8.Future<void> sendPasswordResetEmail(
          {String? email, _i5.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPasswordResetEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> sendSignInLinkToEmail(
          {String? email, _i5.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendSignInLinkToEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(Invocation.method(#setLanguageCode, [languageCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setSettings(
          {bool? appVerificationDisabledForTesting,
          String? userAccessGroup,
          String? phoneNumber,
          String? smsCode,
          bool? forceRecaptchaFlow}) =>
      (super.noSuchMethod(
          Invocation.method(#setSettings, [], {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setPersistence(_i5.Persistence? persistence) =>
      (super.noSuchMethod(Invocation.method(#setPersistence, [persistence]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i5.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<_i5.UserCredential> signInWithCredential(
          _i5.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<_i5.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#signInWithCustomToken, [token]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<_i5.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<_i5.UserCredential> signInWithEmailLink(
          {String? email, String? emailLink}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signInWithEmailLink, [], {#email: email, #emailLink: emailLink}),
          returnValue:
              Future<_i5.UserCredential>.value(_FakeUserCredential_13())) as _i8
          .Future<_i5.UserCredential>);
  @override
  _i8.Future<_i5.ConfirmationResult> signInWithPhoneNumber(String? phoneNumber,
          [_i5.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
          returnValue: Future<_i5.ConfirmationResult>.value(
              _FakeConfirmationResult_14())) as _i8
          .Future<_i5.ConfirmationResult>);
  @override
  _i8.Future<_i5.UserCredential> signInWithPopup(_i16.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, [provider]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<void> signInWithRedirect(_i16.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithRedirect, [provider]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPasswordResetCode, [code]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<void> verifyPhoneNumber(
          {String? phoneNumber,
          _i5.PhoneVerificationCompleted? verificationCompleted,
          _i5.PhoneVerificationFailed? verificationFailed,
          _i5.PhoneCodeSent? codeSent,
          _i5.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
          String? autoRetrievedSmsCodeForTesting,
          Duration? timeout = const Duration(seconds: 30),
          int? forceResendingToken}) =>
      (super.noSuchMethod(
          Invocation.method(#verifyPhoneNumber, [], {
            #phoneNumber: phoneNumber,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i5.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i5.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i5.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata_15()) as _i5.UserMetadata);
  @override
  List<_i5.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i5.UserInfo>[]) as List<_i5.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i8.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i5.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i5.IdTokenResult>.value(_FakeIdTokenResult_16()))
          as _i8.Future<_i5.IdTokenResult>);
  @override
  _i8.Future<_i5.UserCredential> linkWithCredential(
          _i5.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<_i5.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i5.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i5.ConfirmationResult>.value(
                  _FakeConfirmationResult_14()))
          as _i8.Future<_i5.ConfirmationResult>);
  @override
  _i8.Future<_i5.UserCredential> reauthenticateWithCredential(
          _i5.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_13()))
          as _i8.Future<_i5.UserCredential>);
  @override
  _i8.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> sendEmailVerification(
          [_i5.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i5.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i5.User>.value(_FakeUser_17()))
          as _i8.Future<_i5.User>);
  @override
  _i8.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updatePhoneNumber(
          _i5.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i5.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i4.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i4.QueryDocumentSnapshot<T>>[])
          as List<_i4.QueryDocumentSnapshot<T>>);
  @override
  List<_i4.DocumentChange<T>> get docChanges => (super.noSuchMethod(
      Invocation.getter(#docChanges),
      returnValue: <_i4.DocumentChange<T>>[]) as List<_i4.DocumentChange<T>>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_11()) as _i4.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i17.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.ApiReturnValue<_i2.UserModel>> signIn(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue: Future<_i6.ApiReturnValue<_i2.UserModel>>.value(
              _FakeApiReturnValue_18<_i2.UserModel>())) as _i8
          .Future<_i6.ApiReturnValue<_i2.UserModel>>);
  @override
  _i8.Future<_i6.ApiReturnValue<_i2.UserModel>> signUp(
          {String? email,
          String? password,
          String? name,
          String? hobby = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#signUp, [], {
                #email: email,
                #password: password,
                #name: name,
                #hobby: hobby
              }),
              returnValue: Future<_i6.ApiReturnValue<_i2.UserModel>>.value(
                  _FakeApiReturnValue_18<_i2.UserModel>()))
          as _i8.Future<_i6.ApiReturnValue<_i2.UserModel>>);
  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i18.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> setUser({_i2.UserModel? user}) =>
      (super.noSuchMethod(Invocation.method(#setUser, [], {#user: user}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updateUser({_i2.UserModel? user}) =>
      (super.noSuchMethod(Invocation.method(#updateUser, [], {#user: user}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i6.ApiReturnValue<_i2.UserModel>> getUserById({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getUserById, [], {#id: id}),
              returnValue: Future<_i6.ApiReturnValue<_i2.UserModel>>.value(
                  _FakeApiReturnValue_18<_i2.UserModel>()))
          as _i8.Future<_i6.ApiReturnValue<_i2.UserModel>>);
}

/// A class which mocks [DestinationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDestinationRepository extends _i1.Mock
    implements _i19.DestinationRepository {
  MockDestinationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.ApiReturnValue<List<_i11.DestinationModel>>>
      fetchDestinations() => (super.noSuchMethod(
              Invocation.method(#fetchDestinations, []),
              returnValue:
                  Future<_i6.ApiReturnValue<List<_i11.DestinationModel>>>.value(
                      _FakeApiReturnValue_18<List<_i11.DestinationModel>>()))
          as _i8.Future<_i6.ApiReturnValue<List<_i11.DestinationModel>>>);
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i20.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> createTransaction({_i13.TransactionModel? transaction}) =>
      (super.noSuchMethod(
          Invocation.method(
              #createTransaction, [], {#transaction: transaction}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i6.ApiReturnValue<List<_i13.TransactionModel>>> fetchTransactions(
          {String? userId}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchTransactions, [], {#userId: userId}),
              returnValue:
                  Future<_i6.ApiReturnValue<List<_i13.TransactionModel>>>.value(
                      _FakeApiReturnValue_18<List<_i13.TransactionModel>>()))
          as _i8.Future<_i6.ApiReturnValue<List<_i13.TransactionModel>>>);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot extends _i1.Mock
    implements _i4.QueryDocumentSnapshot<Map<dynamic, dynamic>> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.DocumentReference<Map<dynamic, dynamic>> get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
              returnValue: _FakeDocumentReference_8<Map<dynamic, dynamic>>())
          as _i4.DocumentReference<Map<dynamic, dynamic>>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_11()) as _i4.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  Map<dynamic, dynamic> data() =>
      (super.noSuchMethod(Invocation.method(#data, []),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}
